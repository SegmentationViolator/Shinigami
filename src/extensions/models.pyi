import aiosqlite
import enum
import hikari

class Item(enum.IntEnum):
    MYTHICAL_CHOCOLATES = -1
    USED = 1
    GUN = 2
    USED_GUN = ...
    POISON = 4
    USED_POISON = ...
    BAT = 6
    USED_BAT = ...
    BUG = 8
    USED_BUG = ...
    VOTE_CANCELLOR = 10
    USED_VOTE_CANCELLOR = ...
    VOTE_DOUBLER = 12
    USED_VOTE_DOUBLER = ...
    VOTE_MANIPULATOR = 14
    USED_VOTE_MANIPULATOR = ...
    def used(self) -> bool: ...

class Role(enum.IntEnum):
    Neutral = 0
    L = 1
    Kira = 2
    Investigator = 3
    KiraWorshipper = 4

class GameState: ...

class Room:
    host: hikari.User
    game_state: GameState | None
    def __init__(self, host: hikari.User, game_state: GameState | None = None) -> None: ...
    @staticmethod
    async def fetch(connection: aiosqlite.Connection, host: hikari.User) -> Room | None: ...
    async def insert(self, connection: aiosqlite.Connection) -> None: ...

class Player:
    user: hikari.User
    alias: str
    alive: bool
    info: str | None
    item: Item | None
    role: Role
    def __init__(self, user: hikari.User, alias: str, role: Role, alive: bool = True, info: str | None = None, item: Item | None = None) -> None: ...
    @staticmethod
    async def fetch(connection: aiosqlite.Connection, user: hikari.User) -> Player | None: ...
    async def insert(self, connection: aiosqlite.Connection, room: Room) -> None: ...
    async def update(self, connection: aiosqlite.Connection) -> None: ...
    def use_item(self) -> None: ...

class User:
    user: hikari.User
    total_games: int
    wins: int
    xp: int
    def __init__(self, user: hikari.User, total_games: int = 0, wins: int = 0, xp: int = 0) -> None: ...
    @staticmethod
    async def fetch(connection: aiosqlite.Connection, user: hikari.User) -> User | None: ...
    async def insert(self, connection: aiosqlite.Connection) -> None: ...
    async def update(self, connection: aiosqlite.Connection) -> None: ...
    async def room_host_id(self, connection: aiosqlite.Connection) -> hikari.Snowflakeish | None: ...
    async def join_room(self, connection: aiosqlite.Connection, room: Room) -> None: ...
    async def leave_room(self, connection: aiosqlite.Connection) -> None: ...
